/*
 * Copyright (c) 2015 Nexmo Inc
 * All rights reserved.
 *
 * Licensed only under the Nexmo Verify SDK License Agreement located at
 *
 * https://www.nexmo.com/terms-use/verify-sdk/ (the “License”)
 *
 * You may not use, exercise any rights with respect to or exploit this SDK,
 * or any modifications or derivative works thereof, except in accordance
 * with the License.
 */

package com.nexmo.sdk;

import android.content.Context;
import android.text.TextUtils;

import com.nexmo.sdk.core.client.ClientBuilderException;
import com.nexmo.sdk.core.config.Config;
import com.nexmo.sdk.verify.core.service.BaseService;

/**
 * The {@link com.nexmo.sdk.NexmoClient} is the Nexmo SDK entry point.
 * It provides access to the Verify mechanism acquired through a {@link com.nexmo.sdk.verify.client.VerifyClient} object.
 * For the security of your Nexmo account, you should not embed your sharedSecretKey or your
 * Nexmo authorization token as strings in the app you submit to the Google Play Store.
 *
 * <p>To construct a NexmoClient, the required parameters are:
 * <ul>
 *     <li>applicationContext: The application context.</li>
 *     <li>sharedSecretKey:    The pre-shared secret key generated by Nexmo, visible in your user Dashboard.
 *     This key is unique for each application registered to use the Number SDK service.</li>
 *     <li>applicationId:      The auto-generated id for the application.</li>
 * </ul>
 * If the required parameters for creating a {@link com.nexmo.sdk.NexmoClient} instance are not supplied, then {@link NexmoClientBuilder#build} fails by throwing a {@link ClientBuilderException} exception.
 * <p> Example usage:
 * <pre>
 *     try{
 *         // Create a NexmoClient using the NexmoClientBuilder.
 *         NexmoClient myNexmoClient = new NexmoClient.NexmoClientBuilder()
 *                                      .context(myAppContext)
 *                                      .sharedSecretKey("...")
 *                                      .applicationId("...")
 *                                      .build();
 *     } catch (ClientBuilderException e) {
 *         e.printStackTrace();
 *     }
 * </pre>
 */
public class NexmoClient {

    /** Environment endpoint: production or sandbox. */
    public enum ENVIRONMENT_HOST {
        /** Used for applications deployed in production. */
        PRODUCTION,
        /** Used during development and testing. This functionality is not available yet in the SDK.*/
        SANDBOX
    }

    private final Context context;
    private final String appId;
    private final String sharedSecretKey;
    private final ENVIRONMENT_HOST environmentHost;

    private NexmoClient(final Context context, final String appId, final String secretKey, final ENVIRONMENT_HOST environmentHost) {
        this.context = context;
        this.appId = appId;
        this.sharedSecretKey = secretKey;
        this.environmentHost = environmentHost;
    }

    /**
     * Returns the context used for this {@link com.nexmo.sdk.NexmoClient} instance.
     * @return The context.
     */
    public final Context getContext() {
        return this.context;
    }

    /**
     * Returns the pre-shared secret key generated by Nexmo.
     * @return The pre-shared secret key.
     */
    public final String getSharedSecretKey() {
        return this.sharedSecretKey;
    }

    /**
     * Returns the application id used for this {@link com.nexmo.sdk.NexmoClient} instance.
     * @return The auto-generated id for the application.
     */
    public final String getApplicationId() {
        return this.appId;
    }

    /**
     * Returns the host used for this {@link com.nexmo.sdk.NexmoClient} instance.
     * @return The host, for now only {@link com.nexmo.sdk.NexmoClient.ENVIRONMENT_HOST#PRODUCTION} is available for use.
     */
    public final ENVIRONMENT_HOST getEnvironmentHost() {
        return this.environmentHost;
    }

    /**
     * Returns the current version of the Nexmo SDK library.
     *
     *  @return The current version of the Nexmo SDK library.
     */
    public String getVersion() {
        return Config.SDK_REVISION_CODE;
    }

    @Override
    public String toString() {
        return "ApplicationId: " + (this.appId != null ? this.appId : "") + "," + "SharedKey: " + (this.sharedSecretKey != null ? this.sharedSecretKey : "") + "," + "Environment: " + (this.environmentHost != null ? this.environmentHost : "");
    }

    /**
     * Build a new {@link NexmoClient} instance, based on the following mandatory parameters:
     * <ul>
     *     <li>applicationContext: The application context.</li>
     *     <li>sharedSecretKey:    The pre-shared secret key generated by Nexmo, visible in your user Dashboard.
     *     This key is unique for each application registered to use the Number SDK service.</li>
     *     <li>applicationId:      The auto-generated id for the application.</li>
     * </ul>
     * If the required parameters are not supplied an instance cannot be created, and fails by throwing a {@link ClientBuilderException} exception.
     * <p> Example usage:
     * <pre>
     *     try{
     *         // Create a NexmoClient using the NexmoClientBuilder.
     *         NexmoClient myNexmoClient = new NexmoClient.NexmoClientBuilder()
     *                                      .context(myAppContext)
     *                                      .sharedSecretKey("...")
     *                                      .applicationId("...")
     *                                      .build();
     *     } catch (ClientBuilderException e) {
     *         e.printStackTrace();
     *     }
     * </pre>
     */
    public static class NexmoClientBuilder {

        private Context context;
        private String appId;
        private String sharedSecretKey;
        private ENVIRONMENT_HOST environmentHost = ENVIRONMENT_HOST.PRODUCTION;

        /**
         * Acquire a NexmoClient, based on the following mandatory parameters:
         * <ul>
         *     <li>applicationContext: The application context.</li>
         *     <li>sharedSecretKey:    The pre-shared secret key generated by Nexmo, visible in your user Dashboard.
         *     This key is unique for each application registered to use the Number SDK service.</li>
         *     <li>applicationId:      The auto-generated id for the application.</li>
         * </ul>
         * If the required parameters are not supplied an instance cannot be created, and fails by throwing a {@link ClientBuilderException} exception.
         *
         * @return an instance of {@link com.nexmo.sdk.NexmoClient}.
         * @throws ClientBuilderException a {@link com.nexmo.sdk.core.client.ClientBuilderException}.
         */
        public NexmoClient build() throws ClientBuilderException {
            StringBuilder stringBuilder = new StringBuilder();
            if (this.context == null)
                ClientBuilderException.appendExceptionCause(stringBuilder, "Context");
            if (TextUtils.isEmpty(this.sharedSecretKey))
                ClientBuilderException.appendExceptionCause(stringBuilder, BaseService.RESPONSE_SIG);
            if (TextUtils.isEmpty(this.appId))
                ClientBuilderException.appendExceptionCause(stringBuilder, BaseService.PARAM_APP_ID);

            String missingParameters = stringBuilder.toString();
            if (TextUtils.isEmpty(missingParameters))
                return new NexmoClient(this.context, this.appId, this.sharedSecretKey, this.environmentHost);
            else
                throw new ClientBuilderException("Building a NexmoClient instance has failed due to missing parameters: " + missingParameters);
        }

        public NexmoClientBuilder context(final Context context) {
            this.context = context;
            return this;
        }

        public NexmoClientBuilder applicationId(final String applicationId) {
            this.appId = applicationId;
            return this;
        }

        public NexmoClientBuilder sharedSecretKey(final String sharedSecretKey) {
            this.sharedSecretKey = sharedSecretKey;
            return this;
        }

        public NexmoClientBuilder environmentHost(final ENVIRONMENT_HOST environmentHost) {
            this.environmentHost = environmentHost;
            return this;
        }

    }

}
